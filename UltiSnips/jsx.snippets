snippet com "react es6定义组件"
class ${1:Photo} extends ${2:React.Component} {
	/*构造函数初始化*/
	constructor(props){
		super(props);
		this.state = {
			loopsRemaining: this.props.maxLoops,
		};
	};

	/* 静态方法 */
	${3:static defaultProps = {
	};
	static propTypes = {
	};}

	/* 渲染 */
	render() {
		return (
			${4:<Image source={this.props.source} />}
		);
	}
}
endsnippet

snippet native "导入react-native头部"
import React, { Component, PropTypes } from 'react';
import { Provider } from 'react-redux';
import { createStore, applyMiddleware, combineReducers } from 'redux';
import { AppRegistry, StyleSheet, ScrollView, Text, TextInput, View, Image } from 'react-native';
endsnippet

snippet redux "导入redux"
import { createStore, applyMiddleware, combineReducers } from 'redux';
endsnippet

snippet react "导入react头部"
import React, { Component, PropTypes } from 'react';
import { render } from 'react-dom';
import { Router, hashHistory } from 'react-router';
import { Provider } from 'react-redux';
import { applyMiddleware, combineReducers, createStore } from 'redux';
import reduxThunk from 'redux-thunk';
endsnippet

snippet reactdom "导入react-dom"
import ReactDOM, { render } from 'react-dom';
endsnippet

snippet store "创建store"
/*中间件*/
const createStoreWithMiddleware = applyMiddleware(reduxThunk)(createStore);
/*创建reducers*/
const reducers = combineReducers({
	Counter
});
/*创建store*/
const store = createStoreWithMiddleware(reducers);
endsnippet

snippet connect "创建redux connect"
connect((state) => ({
	count: state.count
}), (dispatch) => ({
	actions: bindActionCreators({
		increment,
		decrement
	}, dispatch)
}))(CounterApp);
endsnippet

snippet styles "创建styles"
const styles = StyleSheet.create({
	bigblue: {
		color: 'blue',
		fontWeight: 'bold',
		fontSize: 30,
	},
	red: {
		color: 'red',
	},
});
endsnippet


snippet router "导入react-router"
import { Router, Route, IndexRoute, Link, hashHistory } from 'react-router';
endsnippet

snippet redux "导入redux"
import { createStore, combineReducers } from 'redux';
endsnippet

snippet reducer "创建一个reducer"
const ${1:'reducerName'} = (state = 0, action) => {
	switch (action.type) {
		case '${2:INCREMENT}':
			return ${3:state + 1};
		default:
			return state;
	}
};
$0
endsnippet

snippet action "创建一个action函数"
function ${1:'actionName'}(${2}){
	return {
		type: ${3:},
		index: ${4},
		filter: ${5},
		$2
	};
}
$0
endsnippet

snippet actionredux "创建一个action-redux函数"
function ${1:'actionName'}(${2}){
	return (dispatch, getState) => {
		return dispatch(${3: 'actionFunc'});
	};
}
$0
endsnippet

snippet routerredux "导入react-router-redux"
import { syncHistoryWithStore, routerReducer } from 'react-router-redux';
endsnippet

snippet reactredux "导入react-redux"
import { connect, Provider } from 'react-redux';
endsnippet

snippet "prov(ider)?" "Provider" r
<Provider store={store} key="provider">
${1}
</Provider>
endsnippet

snippet render "渲染器"
render () {
	return (
		$1
	);
}
endsnippet

snippet appreg "注册react-native"
AppRegistry.registerComponent('${1: HelloWorldApp}', () => $1);
endsnippet

snippet navi "创建Navigator"
<Navigator
	initialRoute={{ name: defaultName, component: defaultComponent }}
	configureScene={(route) => {
		return Navigator.SceneConfigs.VerticalDownSwipeJump;
	}}
	renderScene={(route, navigator) => {
		let Component = route.component;
		return <Component {...route.params} navigator={navigator} />
	}}
/>
endsnippet


# dom
snippet text "<Text />"
<Text>${1}</Text>$0
endsnippet

snippet view "<View />"
<View>${1}</View>$0
endsnippet

snippet toucho "<TouchableOpacity />"
<TouchableOpacity>${1}</TouchableOpacity>$0
endsnippet

snippet nol "text, 属性上overflow ellipse"
numberOfLines={${1}}
endsnippet

# 样式
snippet width ""
width: ${1}$0
endsnippet

snippet height ""
width: ${1}$0
endsnippet

snippet pa "padding"
padding: ${1}$0
endsnippet

snippet bgc "background"
backgroundColor: ${1}$0
endsnippet

snippet ma "margin"
margin: ${1}$0
endsnippet

snippet ai "左右居中，决定其子元素沿着次轴（与主轴垂直的轴，比如若主轴方向为row，则次轴方向为column）的排列方式"
alignItems: ${1: flex-start|center|flex-end|stretch}
endsnippet 

snippet jc "上下居中，子元素沿着主轴的排列方式"
justifyContent: ${1: flex-start|center|flex-end|space-around|space-between}
endsnippet

snippet maa "居中"
flex:1, alignItems: 'center', justifyContent: 'center'
endsnippet

snippet fd "等分网络，组件布局，row水平，column竖直"
flexDirection: ${1: 'row|column'}
endsnippet

snippet fs "fontSize"
fontSize: ${1}
endsnippet

snippet tac "textAlign"
textAlign: ${1:'center'}
endsnippet

snippet rm "图片, Object.keys(Image.resizeMode).join(' ');"
resizeMode: ${1:'contain|cover|stretch'}
endsnippet

snippet borr "边框圆角"
	borderRadius: ${1}
endsnippet

snippet pos "绝对定位"
position: '${1:absolute}'
endsnippet

snippet por "相对定位"
position: '${1:relative}'
endsnippet

snippet mr ""
marginRight: ${1}
endsnippet

snippet ml ""
marginLeft: ${1}
endsnippet

snippet mt ""
marginTop: ${1}
endsnippet

snippet mb ""
marginBotton: ${1}
endsnippet

snippet co ""
color:${1}
endsnippet

snippet cbc ""
containerBackgroundColor:${1}
endsnippet 

snippet ff ""
fontFamily:${1}
endsnippet

snippet fw "参数字符串"
fontWeight:${1}
endsnippet

snippet lh ""
lineHeight:${1}
endsnippet

snippet wd ""
writingDirection: ${1:auto|ltr|rtl}
endsnippet

snippet "se(\d+)" "{/*S */} {/*E */}" r
{/*`!p snip.rv = '=' * int(match.group(1))`S ${1} */}
${0}
{/*`!p snip.rv = '=' * int(match.group(1))`E $1 */}
endsnippet
